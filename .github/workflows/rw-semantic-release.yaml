name: Semantic Release

on:
  workflow_call:
    inputs:
      BOOK_NAME:
        required: true
        type: string
      CURRENT_BOOK_VERSION:
        required: true
        type: string
      BDK_RUNTIME_VERSION:
        required: true
        type: string
      DOCKER_REGISTRY:
        required: true
        type: string
      TERRAFORM_BACKEND_BUCKET_NAME:
        required: true
        type: string
      AWS_REGION:
        required: false
        type: string
      AWS_ACCOUNT_ID:
        required: false
        type: string
      FORCE_DEPLOYMENT:
        required: false
        type: boolean
        default: false
      TERRAFORM_WORKING_DIRECTORY:
        required: false
        type: string
        default: "./terraform"
    outputs:
      new_release_published: 
        value: ${{ jobs.SemanticRelease.outputs.new_release_published }}
      version: 
        value: ${{ jobs.SemanticRelease.outputs.version }}
      major: 
        value: ${{ jobs.SemanticRelease.outputs.major }}
      minor: 
        value: ${{ jobs.SemanticRelease.outputs.minor }}
      patch: 
        value: ${{ jobs.SemanticRelease.outputs.patch }}
      lamnda_name: 
        value: ${{ jobs.TerraformDeploy.outputs.lambda_name }}
      lamnda_arn: 
        value: ${{ jobs.TerraformDeploy.outputs.lambda_arn }}

jobs:
  SemanticRelease:
    name: Semantic Release
    runs-on: ubuntu-latest
    outputs:
      new_release_published: ${{ steps.semantic.outputs.new_release_published }}
      version: ${{ steps.semver.outputs.version }}
      major: ${{ steps.semver.outputs.major }}
      minor: ${{ steps.semver.outputs.minor }}
      patch: ${{ steps.semver.outputs.patch }}
    steps:
    - name: Checkout Source Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.BDK_PAT_TOKEN }}
    - name: Semantic Release
      id: semantic
      uses: cycjimmy/semantic-release-action@v4
      with:
        branches: main
        extra_plugins: |
          @semantic-release/exec
      env:
        CODE_ARTIFACT_TOKEN: ${{ steps.setup_credentials.outputs.CODE_ARTIFACT_TOKEN }}
        GITHUB_TOKEN: ${{ secrets.BDK_PAT_TOKEN }}
    - name: Output Semver
      id: semver
      shell: bash
      run: |
        if [ "${{ steps.semantic.outputs.new_release_published }}" == "true" ]; then
          echo "version=${{ steps.semantic.outputs.new_release_version }}" >> $GITHUB_OUTPUT
          echo "major=${{ steps.semantic.outputs.new_release_major_version }}" >> $GITHUB_OUTPUT
          echo "minor=${{ steps.semantic.outputs.new_release_minor_version }}" >> $GITHUB_OUTPUT
          echo "patch=${{ steps.semantic.outputs.new_release_patch_version }}" >> $GITHUB_OUTPUT
        else
          IFS='.' read -r major minor patch <<< "${{ inputs.CURRENT_BOOK_VERSION }}"
          echo "version=${{ inputs.CURRENT_BOOK_VERSION }}" >> $GITHUB_OUTPUT
          echo "major=$major" >> $GITHUB_OUTPUT
          echo "minor=$minor" >> $GITHUB_OUTPUT
          echo "patch=$patch" >> $GITHUB_OUTPUT
        fi

  Docker:
    name: Docker Build and Push
    runs-on: ubuntu-latest
    needs: SemanticRelease
    if: needs.SemanticRelease.outputs.new_release_published == 'true' || inputs.FORCE_DEPLOYMENT
    steps:
    - name: Checkout Source Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Setup Credentials
      uses: ./.github/actions/setup_credentials
      id: setup_credentials
      with:
        AWS_REGION: ${{ inputs.AWS_REGION }}
        AWS_ACCOUNT_ID: ${{ inputs.AWS_ACCOUNT_ID }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_ROLE_TO_ASSUME: ${{ secrets.AWS_ROLE_TO_ASSUME }}
        AWS_ROLE_EXTERNAL_ID: ${{ secrets.AWS_ROLE_EXTERNAL_ID }}
    - name: Build and Push the Docker Image
      shell: bash
      run: |
        docker build --build-arg BDK_RUNTIME_VERSION=$BDK_RUNTIME_VERSION --build-arg CODE_ARTIFACT_TOKEN=${{ steps.setup_credentials.outputs.CODE_ARTIFACT_TOKEN }} -t new_book .
        docker tag new_book $ECR_REPOSITORY:latest
        docker push $ECR_REPOSITORY:latest
        docker tag new_book $ECR_REPOSITORY:${{ needs.SemanticRelease.outputs.version }}
        docker push $ECR_REPOSITORY:${{ needs.SemanticRelease.outputs.version }}
        docker tag new_book $ECR_REPOSITORY:${{ needs.SemanticRelease.outputs.major }}-latest
        docker push $ECR_REPOSITORY:${{ needs.SemanticRelease.outputs.major }}-latest
        docker tag new_book $ECR_REPOSITORY:${{ needs.SemanticRelease.outputs.major }}.${{ needs.SemanticRelease.outputs.minor }}
        docker push $ECR_REPOSITORY:${{ needs.SemanticRelease.outputs.major }}.${{ needs.SemanticRelease.outputs.minor }}
      env:
        BDK_RUNTIME_VERSION: ${{ inputs.BDK_RUNTIME_VERSION }}
        ECR_REPOSITORY: ${{ inputs.DOCKER_REGISTRY }}/kognitos/book/${{ inputs.BOOK_NAME }}

  TerraformPrepare:
    name: Terraform Prepare
    runs-on: ubuntu-latest
    needs: SemanticRelease
    outputs:
      init_config: ${{ steps.tf_config.outputs.init_config }}
      variables_override: ${{ steps.tf_config.outputs.variables_override }}
    steps:
    - name: Checkout Source Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Setup Credentials
      uses: ./.github/actions/setup_credentials
      id: setup_credentials
      with:
        AWS_REGION: ${{ inputs.AWS_REGION }}
        AWS_ACCOUNT_ID: ${{ inputs.AWS_ACCOUNT_ID }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_ROLE_TO_ASSUME: ${{ secrets.AWS_ROLE_TO_ASSUME }}
        AWS_ROLE_EXTERNAL_ID: ${{ secrets.AWS_ROLE_EXTERNAL_ID }}
    - name: Prepare Variables and Config
      id: tf_config
      shell: bash
      run: |
        init_config='-backend-config="region=${{ inputs.AWS_REGION }}" -backend-config="bucket=${{ inputs.TERRAFORM_BACKEND_BUCKET_NAME }}" -backend-config="key=${{ inputs.BOOK_NAME }}/${{ inputs.BOOK_NAME }}_${{ needs.SemanticRelease.outputs.version }}.tfstate"'
        variables_override='-var book_name=${{ inputs.BOOK_NAME }} -var region=${{ inputs.AWS_REGION }} -var bdk_runtime_version=${{ inputs.BDK_RUNTIME_VERSION }} -var book_version=${{ needs.SemanticRelease.outputs.version }} -var image_uri=${{ inputs.DOCKER_REGISTRY }}/kognitos/book/${{ inputs.BOOK_NAME }}:${{ needs.SemanticRelease.outputs.version }}'
        echo "init_config=$init_config" >> $GITHUB_OUTPUT
        echo "variables_override=$variables_override" >> $GITHUB_OUTPUT
    - name: Terraform Deploy
      id: terraform
      uses: ./.github/actions/terraform_check
      with:
        INIT_CONFIG: ${{ steps.tf_config.outputs.init_config }}
        VARIABLES_OVERRIDE: ${{ steps.tf_config.outputs.variables_override }}
        WORKING_DIRECTORY: ${{ inputs.TERRAFORM_WORKING_DIRECTORY }}

  TerraformApply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: [ SemanticRelease, Docker, TerraformPrepare ]
    if: needs.SemanticRelease.outputs.new_release_published == 'true' || inputs.FORCE_DEPLOYMENT
    outputs:
      lamnda_name: ${{ steps.terraform.outputs.lambda_name }}
      lamnda_arn: ${{ steps.terraform.outputs.lambda_arn }}
    steps:
    - name: Checkout Source Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Setup Credentials
      uses: ./.github/actions/setup_credentials
      id: setup_credentials
      with:
        AWS_REGION: ${{ inputs.AWS_REGION }}
        AWS_ACCOUNT_ID: ${{ inputs.AWS_ACCOUNT_ID }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_ROLE_TO_ASSUME: ${{ secrets.AWS_ROLE_TO_ASSUME }}
        AWS_ROLE_EXTERNAL_ID: ${{ secrets.AWS_ROLE_EXTERNAL_ID }}
    - name: Terraform Deploy
      id: terraform
      uses: ./.github/actions/terraform_apply
      with:
        INIT_CONFIG: ${{ needs.TerraformPrepare.outputs.init_config }}
        VARIABLES_OVERRIDE: ${{ needs.TerraformPrepare.outputs.variables_override }}
        WORKING_DIRECTORY: ${{ inputs.TERRAFORM_WORKING_DIRECTORY }}